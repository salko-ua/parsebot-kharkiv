import types
import traceback
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from src.handlers.parser import *
from src.handlers.keyboard import post_kb, tags_kb, utilities_kb, get_subway_stantion_names_by_color, subway_path_kb
from src.utilities import delete_exist_name_in_str, check_is_exist_name_to_delete

router = Router()


class Caption(StatesGroup):
    control = State()
    edit_caption = State()
    edit_tags = State()
    edit_subway = State()


@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        f"–í—ñ—Ç–∞—é {message.from_user.full_name}! üëè\n"
        "–¶—ñ–ª—å –±–æ—Ç–∞,—Ü–µ —à–≤–∏–¥–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ —É telegram –∑ OLX.ua\n"
        "–ü—Ä–∏—î–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è üòÅ",
        disable_web_page_preview=True,
    )


@router.message(F.text.startswith("https://www.olx.ua/"))
async def main(message: types.Message, state: FSMContext):
    if message.from_user.id not in [348596474, 2138964363]:
        await message.answer("–¶–µ–π –±–æ—Ç –≤–ª–∞—Å–Ω—ñ—Å—Ç—å - @realtor_057 , —Ç—ñ–ª—å–∫–∏ –≤—ñ–Ω –º–æ–∂–µ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ö–æ–∂–æ–≥–æ –±–æ—Ç–∞, –∞–±–æ –ø—Ä–∏–¥–±–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞, –ø–∏—à—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç—ñ @realtor_057")
        return
    try:
        await get_data(message, state)
    except Exception as e:
        await message.bot.send_message(chat_id=2138964363 ,text=f"–£ @realtor_057 –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ –ø–æ—Å—Ç–æ–º\n{message.text}\n\n error: {e}\n\n traceback: {traceback.format_exc()}")
        await message.answer(
            f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ ‚ùå\n–°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏\n",
            reply_markup=types.ReplyKeyboardRemove(),
        )


@router.callback_query(F.data == "–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å ‚úèÔ∏è", Caption.control)
async def edit_caption(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    caption_user = data["caption_user"]
    await query.message.delete()
    await query.message.answer(f"–û—Å—å —Ç–µ–∫—Å—Ç —è–∫–∏–π –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏: \n{caption_user}")
    await state.set_state(Caption.edit_caption)


@router.callback_query(F.data == "–î–æ–¥–∞—Ç–∏ —Ç–µ–≥ üß∑", Caption.control)
async def edit_caption(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_reply_markup(reply_markup=await tags_kb())
    await state.set_state(Caption.edit_tags)


@router.callback_query(F.data == "üîô –ù–∞–∑–∞–¥", Caption.edit_tags)
async def tags_back(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_reply_markup(reply_markup=await post_kb())
    await state.set_state(Caption.control)


@router.callback_query(Caption.edit_tags)
async def tags_edit_finish(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Caption.control)

    data = await state.get_data()
    previous_tags = data["caption_tag"]
    if not await check_is_exist_name_to_delete(previous_tags, "#"+query.data):
        new_tags = previous_tags + f" #{query.data}"
    else:
        new_tags = await delete_exist_name_in_str(previous_tags, "#"+query.data)

    await state.update_data(caption_tag=new_tags)

    caption_info = data["caption_info"]
    caption_money = data["caption_money"]
    caption_user = data["caption_user"]
    caption_communication = data["caption_communication"]
    subway = data["subway"]
    full_caption = get_full_caption(
        caption_info, caption_money, caption_user, new_tags, caption_communication, subway
    )

    await query.message.edit_caption(caption=full_caption, reply_markup=await post_kb())


@router.callback_query(F.data == "–î–æ–¥–∞—Ç–∏ –º–µ—Ç—Ä–æ ‚ìÇÔ∏è", Caption.control)
async def subway_edit_start(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_reply_markup(reply_markup=await subway_path_kb())
    await state.set_state(Caption.edit_subway)



@router.callback_query(F.data == "üîô –ù–∞–∑–∞–¥", Caption.edit_subway)
async def subway_back(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_reply_markup(reply_markup=await post_kb())
    await state.set_state(Caption.control)


@router.callback_query(F.data == "–ó–µ–ª–µ–Ω–∞ üü¢", Caption.edit_subway)
@router.callback_query(F.data == "–°–∏–Ω—è üîµ", Caption.edit_subway)
@router.callback_query(F.data == "–ß–µ—Ä–≤–æ–Ω–∞ üî¥", Caption.edit_subway)
async def subway_edit_choose(query: types.CallbackQuery):
    await query.message.edit_reply_markup(reply_markup=await get_subway_stantion_names_by_color(query.data))

@router.callback_query(Caption.edit_subway)
async def subway_edit_finish(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Caption.control)

    data = await state.get_data()
    previous_subway_text = data["subway"]

    if not await check_is_exist_name_to_delete(previous_subway_text, query.data):
        new_subway_text = previous_subway_text + f" {query.data}"
    else:
        new_subway_text = await delete_exist_name_in_str(previous_subway_text, query.data)


    await state.update_data(subway=new_subway_text)

    caption_info = data["caption_info"]
    caption_money = data["caption_money"]
    caption_user = data["caption_user"]
    caption_tag = data["caption_tag"]
    caption_communication = data["caption_communication"]
    full_caption = get_full_caption(
        caption_info, caption_money, caption_user, caption_tag, caption_communication, new_subway_text
    )


    await query.message.edit_caption(caption=full_caption, reply_markup=await post_kb())


@router.callback_query(F.data == "–†–µ–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª ‚ñ∂Ô∏è", Caption.control)
async def repost_to_channel(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    media_groups: MediaGroupBuilder = data["all_photo"]
    caption_info = data["caption_info"]
    caption_money = data["caption_money"]
    caption_user = data["caption_user"]
    caption_tag = data["caption_tag"]
    caption_communication = data["caption_communication"]
    subway = data["subway"]
    full_caption = get_full_caption(
        caption_info, caption_money, caption_user, caption_tag, caption_communication, subway
    )
    media_groups.caption = full_caption

    await state.clear()
    await query.message.edit_reply_markup(reply_markup=None)

    media_group = media_groups.build()
    new_media_group = media_group.copy()

    for i in range(len(media_group)):
        try:
            message_photo = await query.message.bot.send_media_group(
                chat_id=-1001902595324, message_thread_id=805, media=[media_group[i]]
            )
            await query.message.bot.delete_message(
                message_id=message_photo[0].message_id, chat_id=-1001902595324
            )
        except Exception as e:
            new_media_group.remove(media_group[i])

    print(new_media_group)
    await query.message.bot.send_media_group(
        chat_id=-1001489053011, media=new_media_group
    )


@router.callback_query(F.data == "‚ûï‚ûñ –∫–æ–º –ø–æ—Å–ª—É–≥–∏", Caption.control)
@router.callback_query(F.data == "‚ûï‚ûñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏", Caption.control)
@router.callback_query(F.data == "‚ûï‚ûñ —Å–≤—ñ—Ç–ª–æ", Caption.control)
async def utilities(query: types.CallbackQuery, state: FSMContext):
    async def is_utilities(text) -> str:
        pattern_utilities = r"\+–∫–æ–º –ø–æ—Å–ª—É–≥–∏"
        pattern_counter = r"\+–ª—ñ—á–∏–ª—å–Ω–∏–∫"
        pattern_light = r"\+—Å–≤—ñ—Ç–ª–æ"

        if re.search(pattern_utilities, text, re.IGNORECASE):
            return "utilities"
        elif re.search(pattern_counter, text, re.IGNORECASE):
            return "counter"
        elif re.search(pattern_light, text, re.IGNORECASE):
            return "light"
        else:
            return ""

    async def delete_utilities(
        query: types.CallbackQuery, value: str, price: str, state: FSMContext
    ):
        money: str = re.sub(value, "", price, flags=re.IGNORECASE)
        await state.update_data(caption_money=money)
        caption_info = data["caption_info"]
        caption_user = data["caption_user"]
        caption_tag = data["caption_tag"]
        caption_communication = data["caption_communication"]
        subway = data["subway"]
        full_caption = get_full_caption(
            caption_info, money, caption_user, caption_tag, caption_communication, subway
        )

        await query.message.edit_caption(
            caption=full_caption, reply_markup=await post_kb()
        )

    async def add_utilities(
        query: types.CallbackQuery, pattern: str, money: str, state: FSMContext
    ):
        money: str = money + pattern
        await state.update_data(caption_money=money)
        caption_info = data["caption_info"]
        caption_user = data["caption_user"]
        caption_tag = data["caption_tag"]
        caption_communication = data["caption_communication"]
        subway = data["subway"]
        full_caption = get_full_caption(
            caption_info, money, caption_user, caption_tag, caption_communication, subway
        )

        await query.message.edit_caption(
            caption=full_caption, reply_markup=await utilities_kb(query.data)
        )

    data = await state.get_data()
    money = data["caption_money"]

    utilitie = await is_utilities(money)

    if not utilitie:
        if query.data == "‚ûï‚ûñ –∫–æ–º –ø–æ—Å–ª—É–≥–∏":
            pattern_utilities = "+–∫–æ–º –ø–æ—Å–ª—É–≥–∏"
            await add_utilities(query, pattern_utilities, money, state)

        if query.data == "‚ûï‚ûñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏":
            pattern_counter = "+–ª—ñ—á–∏–ª—å–Ω–∏–∫"
            await add_utilities(query, pattern_counter, money, state)

        if query.data == "‚ûï‚ûñ —Å–≤—ñ—Ç–ª–æ":
            pattern_light = "+—Å–≤—ñ—Ç–ª–æ"
            await add_utilities(query, pattern_light, money, state)

    if utilitie:
        if utilitie == "utilities":
            pattern_utilities = r"\+–∫–æ–º –ø–æ—Å–ª—É–≥–∏"
            await delete_utilities(query, pattern_utilities, money, state)

        if utilitie == "counter":
            pattern_counter = r"\+–ª—ñ—á–∏–ª—å–Ω–∏–∫"
            await delete_utilities(query, pattern_counter, money, state)

        if utilitie == "light":
            pattern_light = r"\+—Å–≤—ñ—Ç–ª–æ"
            await delete_utilities(query, pattern_light, money, state)


@router.message(Caption.edit_caption)
async def edit_caption_completed(message: types.Message, state: FSMContext):
    await state.update_data(caption_user=message.text)
    data = await state.get_data()
    first_photo = data["first_photo"]
    caption_info = data["caption_info"]
    caption_money = data["caption_money"]
    caption_user = data["caption_user"]
    caption_tag = data["caption_tag"]
    caption_communication = data["caption_communication"]
    subway = data["subway"]
    await message.delete()
    await state.set_state(Caption.control)

    full_caption = get_full_caption(
        caption_info, caption_money, caption_user, caption_tag, caption_communication, subway
    )

    await message.answer_photo(
        caption=full_caption, photo=first_photo, reply_markup=await post_kb()
    )


@router.message()
async def all_message(message: types.Message):
    await message.answer(
        "üî¥ –í–∏–±–∞—á—Ç–µ, –∞–ª–µ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ç—ñ–ª—å–∫–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É olx.ua –∑ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—é.\n"
        "–£ —Ñ–æ—Ä–º–∞—Ç—ñ https://www.olx.ua/...",
        disable_web_page_preview=True,
    )
